# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

pool:
  vmImage: ubuntu-latest

stages:    
  - stage: Dev
    displayName: Dev
    jobs:
      - job: plan
        pool:
          vmImage: ubuntu-latest
        displayName:  Terraform Dev Init and Apply
        steps:
        - task: DownloadSecureFile@1
          name: aws_credentials
          displayName: 'Download AWS Credentials'
          inputs:
            secureFile: 'credentials'
        - task: PowerShell@2
          displayName: 'New directory to keep the aws credentials'
          inputs:
            targetType: 'inline'
            script: |
              New-item -Path "~/" -Name ".aws" -ItemType "directory"
        - task: CopyFiles@2
          displayName: 'Copy aws credentials to home directory '
          inputs:
            SourceFolder: "$(Agent.TempDirectory)"
            contents: 'credentials'
            targetFolder: '~/.aws/'
        - task: PowerShell@2
          inputs:
            targetType: 'inline'
            script: 'terraform init -reconfigure -backend-config="dev-backend.conf"'
            workingDirectory: '$(Build.Repository.LocalPath)/saas_app'
          displayName: Terraform init for plan
        - task: PowerShell@2
          inputs:
            targetType: 'inline'
            script: 'terraform plan --var-file="dev-app.tfvars" -var createdBy="dev-pipeline" -var tags="asd" -out main.tfplan'
            workingDirectory: '$(Build.Repository.LocalPath)/saas_app'
          displayName: "Terraform Plan"
      - job: approve
        dependsOn: plan
        condition: and (succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
        pool: server
        displayName: Wait for approval
        steps:
        - task: ManualValidation@0
          timeoutInMinutes: 15 # task times out in 15 mins
          inputs:
            notifyUsers: saasproject86@outlook.com
            instructions: 'Please validate the build configuration and resume'
            onTimeout: 'reject'
      - job: apply
        dependsOn: approve
        pool:
          vmImage: ubuntu-latest
        displayName:  Terraform Dev Init and Apply
        steps:
        - task: DownloadSecureFile@1
          name: aws_credentials
          displayName: 'Download AWS Credentials'
          inputs:
            secureFile: 'credentials'
        - task: PowerShell@2
          displayName: 'New directory to keep the aws credentials'
          inputs:
            targetType: 'inline'
            script: |
              New-item -Path "~/" -Name ".aws" -ItemType "directory"
        - task: CopyFiles@2
          displayName: 'Copy aws credentials to home directory '
          inputs:
            SourceFolder: "$(Agent.TempDirectory)"
            contents: 'credentials'
            targetFolder: '~/.aws/'
        - task: PowerShell@2
          inputs:
            targetType: 'inline'
            script: 'terraform init -reconfigure -backend-config="dev-backend.conf"'
            workingDirectory: '$(Build.Repository.LocalPath)/saas_app'
          displayName: Terraform init for apply
        - task: PowerShell@2
          inputs:
            targetType: 'inline'
            script: 'terraform apply --var-file="dev-app.tfvars" -var createdBy="dev-pipeline" -var tags="asd" --auto-approve'
            workingDirectory: '$(Build.Repository.LocalPath)/saas_app'
          displayName: "Terraform Apply"
  - stage: Prod
    displayName: Prod
    jobs:
      - job: plan
        pool:
          vmImage: ubuntu-latest
        displayName: Terraform Prod Init and Apply
        steps:
        - task: DownloadSecureFile@1
          name: aws_credentials
          displayName: 'Download AWS Credentials'
          inputs:
            secureFile: 'credentials'
        - task: PowerShell@2
          displayName: 'New directory to keep the aws credentials'
          inputs:
            targetType: 'inline'
            script: |
              New-item -Path "~/" -Name ".aws" -ItemType "directory"
        - task: CopyFiles@2
          displayName: 'Copy aws credentials to home directory '
          inputs:
            SourceFolder: "$(Agent.TempDirectory)"
            contents: 'credentials'
            targetFolder: '~/.aws/'
        - task: PowerShell@2
          inputs:
            targetType: 'inline'
            script: 'terraform init -reconfigure -backend-config="prod-backend.conf" -no-color'
            workingDirectory: '$(Build.Repository.LocalPath)/saas_app'
          displayName: Terraform init for plan
        - task: PowerShell@2
          inputs:
            targetType: 'inline'
            script: 'terraform plan --var-file="prod-app.tfvars" -var createdBy="prod-pipeline" -var tags="asd"  -out main_prod.tfplan -no-color '
            workingDirectory: '$(Build.Repository.LocalPath)/saas_app'
          displayName: "Terraform Plan"
      - job: approve
        dependsOn: plan
        condition: and (succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
        pool: server
        displayName: Wait for approval
        steps:
        - task: ManualValidation@0
          timeoutInMinutes: 15 # task times out in 15 mins
          inputs:
            notifyUsers: saasproject86@outlook.com
            instructions: 'Please validate the build configuration and resume'
            onTimeout: 'reject'
      - job: apply
        dependsOn: approve
        pool:
          vmImage: ubuntu-latest
        displayName: Terraform Prod Apply
        steps:
        - task: DownloadSecureFile@1
          name: aws_credentials
          displayName: 'Download AWS Credentials'
          inputs:
            secureFile: 'credentials'
        - task: PowerShell@2
          displayName: 'New directory to keep the aws credentials'
          inputs:
            targetType: 'inline'
            script: |
              New-item -Path "~/" -Name ".aws" -ItemType "directory"
        - task: CopyFiles@2
          displayName: 'Copy aws credentials to home directory '
          inputs:
            SourceFolder: "$(Agent.TempDirectory)"
            contents: 'credentials'
            targetFolder: '~/.aws/'
        - task: PowerShell@2
          inputs:
            targetType: 'inline'
            script: 'terraform init -reconfigure -backend-config="prod-backend.conf" -no-color'
            workingDirectory: '$(Build.Repository.LocalPath)/saas_app'
          displayName: Terraform init for apply
        - task: PowerShell@2
          inputs:
            targetType: 'inline'
            script: 'terraform apply --var-file="prod-app.tfvars" -var createdBy="prod-pipeline" -var tags="asd" --auto-approve -no-color'
            workingDirectory: '$(Build.Repository.LocalPath)/saas_app'
          displayName: "Terraform Apply"