# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

pool:
  vmImage: ubuntu-latest

stages:    
  - stage: Dev
    displayName: dev-deployment
    jobs:
      - job: plan
        pool:
          vmImage: ubuntu-latest
        displayName:  terraform-init
        steps:
        - task: TerraformTaskV1@0
          displayName: 'terraform-init'
          inputs:
            provider: 'aws'
            command: 'init'
            workingDirectory: '$(System.DefaultWorkingDirectory)/tf/plans/rcits-aws-cloud'
            backendServiceAWS: 'rcits-aws-1'
            backendAWSBucketName: 'rcits-terraform'
            backendAWSKey: 'ado-tf-test'
        - task: TerraformTaskV1@0
          displayName: 'terraform-plan'
          inputs:
            provider: 'aws'
            command: 'plan'
            workingDirectory: '$(System.DefaultWorkingDirectory)/tf/plans/rcits-aws-cloud'
            environmentServiceNameAWS: 'rcits-aws-1'
      - job: approve
        dependsOn: plan
        condition: and (succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
        pool: server
        displayName: Wait for approval
        steps:
        - task: ManualValidation@0
          timeoutInMinutes: 15 # task times out in 15 mins
          inputs:
            notifyUsers: bmquiroz@outlook.com
            instructions: 'Please validate the build configuration and resume'
            onTimeout: 'reject'
      - job: apply
        dependsOn: approve
        pool:
          vmImage: ubuntu-latest
        displayName:  'terraform-apply'
        steps:
        - task: TerraformTaskV1@0
          displayName: 'terraform-apply'
          inputs:
            provider: 'aws'
            command: 'apply'
            workingDirectory: '$(System.DefaultWorkingDirectory)/tf/plans/rcits-aws-cloud'
            environmentServiceNameAWS: 'rcits-aws-1'